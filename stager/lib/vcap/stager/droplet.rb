require 'fileutils'

require 'vcap/stager/constants'

module VCAP
  module Stager
  end
end

class VCAP::Stager::Droplet
  VCAP_START_TEMPLATE_PATH = File.join(VCAP::Stager::ASSET_DIR, 'startup.erb')

  attr_reader :base_dir
  attr_reader :feature_start_dir
  attr_reader :feature_stop_dir
  attr_reader :framework_start_path
  attr_reader :framework_stop_path
  attr_reader :vcap_start_path
  attr_reader :vcap_stop_path
  attr_reader :logs_dir
  attr_reader :app_source_dir
  attr_reader :pidfile_path

  def initialize(base_dir, asset_dir=VCAP::Stager::ASSET_DIR)
    @asset_dir = asset_dir

    @base_dir = base_dir
    # Dirs contain the start/stop scripts generated by the selected feature plugins
    @feature_start_dir = File.join(@base_dir, 'vcap', 'script', 'feature_start')
    @feature_stop_dir  = File.join(@base_dir, 'vcap', 'script', 'feature_stop')

    # Framework specific start/stop scripts
    @framework_start_path = File.join(@base_dir, 'framework_start')
    @framework_stop_path  = File.join(@base_dir, 'framework_stop')

    # Start/stop scripts that the DEA expects
    @vcap_start_path = File.join(@base_dir, 'startup')
    @vcap_stop_path  = File.join(@base_dir, 'stop')

    # Directory that houses the application source
    @app_source_dir = File.join(@base_dir, 'app')

    # Directory that will house application logs. VMC/CC expects that logs live here
    # for the 'logs' command to work.
    @logs_dir = File.join(@base_dir, 'logs')

    # The DEA looks for the presence of this file when starting the app
    @pidfile_path = File.join(@base_dir, 'run.pid')
  end

  # Create the necessary dirs, copies over the app source and expected
  # vcap start/stop scripts
  #
  # @param  source_dir  String  Directory containing the application source
  def create_skeleton(source_dir)
    FileUtils.mkdir_p(@feature_start_dir)
    FileUtils.mkdir_p(@feature_stop_dir)
    FileUtils.mkdir_p(@app_source_dir)
    FileUtils.mkdir_p(@logs_dir)

    app_source_glob = File.join(source_dir, '*')
    system("cp -a #{app_source_glob} #{@app_source_dir} 2> /dev/null")

    # Copy over the stop script (expected by dea)
    # Start script must be generated once all environment variables have been collected
    FileUtils.cp(File.join(@asset_dir, 'stop'), @vcap_stop_path)
    FileUtils.chmod(0700, @vcap_stop_path)
  end

  def feature_start_path(name)
    File.join(@feature_start_dir, name)
  end

  def feature_stop_path(name)
    File.join(@feature_stop_dir, name)
  end


  # Generates the startup script used by the DEA.
  #
  # @param  environment_variables  Hash    Environment variables to be exported
  def generate_vcap_start_script(environment_variables)
    template = File.read(File.join(@asset_dir, 'startup.erb'))
    renderer = ERB.new(template)
    contents = renderer.result(binding())
    File.open(@vcap_start_path, 'w+') {|f| f.write(contents) }
    FileUtils.chmod(0700, @vcap_start_path)
    @vcap_start_path
  end
end
